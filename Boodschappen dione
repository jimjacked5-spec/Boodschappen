<!DOCTYPE html>
<html lang="nl">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>ðŸ›’ Boodschappenlijst Dione</title>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<style>
:root{
  --bg:#f9f9f9;--text:#222;--sec:#fff;--header:#2c5530;--accent:#2c5530;--border:#ddd;
}
*{box-sizing:border-box}
body{margin:0;padding:18px;font-family:system-ui,Segoe UI,Roboto,Arial,sans-serif;background:var(--bg);color:var(--text);}
h1{margin:0 0 12px;color:var(--header)}
.section{background:var(--sec);padding:12px;border-radius:10px;margin-bottom:14px;border:1px solid var(--border)}
.form-row{display:flex;gap:10px;flex-wrap:wrap}
label{font-size:13px;display:flex;flex-direction:column;flex:1 1 200px}
input,select,button,textarea{font-size:14px;padding:8px;border:1px solid var(--border);border-radius:8px;background:inherit;color:inherit}
button{background:var(--accent);color:#fff;border:none;cursor:pointer;padding:9px 12px;border-radius:999px}
button.secondary{background:transparent;color:var(--accent);border:1px solid var(--accent)}
.spread{overflow-x:auto;background:var(--sec);border-radius:10px}
table{width:100%;border-collapse:collapse;min-width:920px}
th,td{border:1px solid var(--border);padding:7px;text-align:center;font-size:13px}
th{background:var(--header);color:#fff;position:sticky;top:0;z-index:1}
.product-name{text-align:left}
.small{font-size:12px}
.pill{display:inline-block;padding:6px 10px;border-radius:999px;border:1px solid var(--border);font-size:13px}
.footer-totals{display:flex;gap:8px;flex-wrap:wrap;margin-top:8px;align-items:center}
@media (max-width:640px){
  table{min-width:700px}
  label{flex:1 1 100%}
}
</style>
</head>
<body>
<h1>ðŸ›’ Boodschappenlijst Dione</h1>

<div class="section">
  <div class="form-row">
    <button id="exportPdfBtn">Exporteer PDF</button>
    <div class="pill">Gewogen deelnemers: <strong id="weightedCount">0.00</strong></div>
    <div class="pill">Event: 
      <select id="eventType" style="margin-left:8px;border:none;background:transparent">
        <option value="2">Weekend (2 dagen)</option>
        <option value="3">Kort (3 dagen)</option>
        <option value="5">Kamp (5 dagen)</option>
        <option value="6">Lang (6 dagen)</option>
        <option value="7">Lang (7 dagen)</option>
      </select>
    </div>
  </div>
</div>

<div class="section">
  <h3>Deelnemers</h3>
  <form id="participantForm" class="form-row">
    <label>Naam deelnemer
      <input id="participantName" type="text" placeholder="Bijv. Saskiaâ€¦" />
    </label>
    <label>Type deelnemer
      <select id="participantType">
        <option value="Kind">Kind</option>
        <option value="Volwassene">Volwassene</option>
      </select>
    </label>
    <div style="display:flex;align-items:end;">
      <button type="submit">Voeg deelnemer toe</button>
    </div>
  </form>

  <div style="margin-top:10px;display:flex;gap:8px;align-items:center;flex-wrap:wrap;">
    <label style="flex:1 1 300px">Deelnemers (selecteer om te verwijderen)
      <select id="participantsDropdown" size="6" style="width:100%;"></select>
    </label>
    <div style="display:flex;flex-direction:column;gap:8px;">
      <button id="removeParticipantBtn" class="secondary">Verwijder geselecteerde</button>
      <button id="clearParticipantsBtn" class="secondary">Wis alle deelnemers</button>
    </div>
  </div>
</div>

<div class="section">
  <h3>Nieuw product toevoegen</h3>
  <form id="productForm" class="form-row">
    <label>Productnaam
      <input id="productName" type="text" placeholder="Bijv. Eierenâ€¦" />
    </label>
    <label>Eenheid
      <input id="productUnit" type="text" placeholder="kilo, pak, liter..." />
    </label>
    <label>Consumptie p/kind p/d
      <input id="productConsumption" type="number" step="0.01" />
    </label>
    <label>Prijs p/e (â‚¬)
      <input id="productPrice" type="number" step="0.01" />
    </label>
    <div style="display:flex;align-items:end;">
      <button type="submit">Voeg product toe</button>
    </div>
  </form>
</div>

<div class="section spread">
  <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:8px;">
    <strong>Producten & berekeningen</strong>
    <div class="footer-totals small">
      <div>Totals â€” 2d: <span id="tot2">â‚¬ 0.00</span></div>
      <div>3d: <span id="tot3">â‚¬ 0.00</span></div>
      <div>5d: <span id="tot5">â‚¬ 0.00</span></div>
      <div>6d: <span id="tot6">â‚¬ 0.00</span></div>
      <div>7d: <span id="tot7">â‚¬ 0.00</span></div>
    </div>
  </div>

  <table>
    <thead>
     <tr>
      <th>Product</th>
      <th>Eenheid</th>
      <th>Prijs p/e</th>
      <th>Voorraad</th>
      <th>Te bestellen</th>
      <th>2 dagen</th>
      <th>3 dagen</th>
      <th>5 dagen</th>
      <th>6 dagen</th>
      <th>7 dagen</th>
      <th>Actueel</th>
      <th>Verwijder</th>
     </tr>
    </thead>
    <tbody id="tableBody"></tbody>
  </table>
</div>

<script>
/* ------------- Config & storage keys ------------- */
const STORAGE_KEYS = {
  parts: 'bl_parts_v1',
  prods: 'bl_prods_v1',
  factor: 'bl_factor_v1'
};

/* ------------- Initial data (defaults) ------------- */
const defaultProducts = [
  {product:'Brood (volkoren)', unit:'brood', consumption:0.15, price:2.10, inventory:0, actual:0},
  {product:'Boter', unit:'pakje', consumption:0.02, price:2.50, inventory:0, actual:0},
  {product:'Hagelslag', unit:'doos', consumption:0.05, price:1.80, inventory:0, actual:0},
  {product:'Pindakaas', unit:'pot', consumption:0.03, price:3.20, inventory:0, actual:0},
  {product:'Jam', unit:'pot', consumption:0.02, price:2.75, inventory:0, actual:0},
  {product:'Cornflakes', unit:'pak', consumption:0.04, price:3.00, inventory:0, actual:0},
  {product:'Melk', unit:'liter', consumption:0.20, price:0.95, inventory:0, actual:0},
  {product:'Yoghurt', unit:'bak', consumption:0.25, price:0.60, inventory:0, actual:0},
  {product:'Eieren', unit:'stuk', consumption:0.30, price:0.30, inventory:0, actual:0},
  {product:'Sinaasappelsap', unit:'liter', consumption:0.15, price:1.50, inventory:0, actual:0},
  {product:'Kaas', unit:'plak', consumption:0.05, price:1.80, inventory:0, actual:0},
  {product:'Ham', unit:'plak', consumption:0.04, price:2.00, inventory:0, actual:0},
  {product:'Appels', unit:'stuk', consumption:0.20, price:0.60, inventory:0, actual:0},
  {product:'Bananen', unit:'stuk', consumption:0.20, price:0.50, inventory:0, actual:0},
  {product:'Chocolademelk', unit:'liter', consumption:0.15, price:1.20, inventory:0, actual:0}
];

let participants = [];
let products = [];
let adultFactor = parseFloat(localStorage.getItem(STORAGE_KEYS.factor)) || 1.5;

/* ------------- Elements ------------- */
const el = {
  participantForm: document.getElementById('participantForm'),
  participantName: document.getElementById('participantName'),
  participantType: document.getElementById('participantType'),
  participantsDropdown: document.getElementById('participantsDropdown'),
  removeParticipantBtn: document.getElementById('removeParticipantBtn'),
  clearParticipantsBtn: document.getElementById('clearParticipantsBtn'),
  productForm: document.getElementById('productForm'),
  productName: document.getElementById('productName'),
  productUnit: document.getElementById('productUnit'),
  productConsumption: document.getElementById('productConsumption'),
  productPrice: document.getElementById('productPrice'),
  tableBody: document.getElementById('tableBody'),
  weightedCount: document.getElementById('weightedCount'),
  exportPdfBtn: document.getElementById('exportPdfBtn'),
  tot2: document.getElementById('tot2'),
  tot3: document.getElementById('tot3'),
  tot5: document.getElementById('tot5'),
  tot6: document.getElementById('tot6'),
  tot7: document.getElementById('tot7'),
  eventType: document.getElementById('eventType')
};

/* ------------- Storage helpers ------------- */
function saveAll() {
  localStorage.setItem(STORAGE_KEYS.parts, JSON.stringify(participants));
  localStorage.setItem(STORAGE_KEYS.prods, JSON.stringify(products));
  localStorage.setItem(STORAGE_KEYS.factor, String(adultFactor));
}
function loadAll() {
  participants = JSON.parse(localStorage.getItem(STORAGE_KEYS.parts) || 'null') || [];
  products = JSON.parse(localStorage.getItem(STORAGE_KEYS.prods) || 'null') || [];
  // if empty, fill defaults
  if (!participants || participants.length === 0) {
    participants = [];
    for (let i=1;i<=15;i++) participants.push({name:`Kind ${i}`, type:'Kind'});
    for (let i=1;i<=4;i++) participants.push({name:`Volwassene ${i}`, type:'Volwassene'});
  }
  if (!products || products.length === 0) {
    products = defaultProducts.map(p => ({...p}));
  }
}
loadAll();

/* ------------- Utilities ------------- */
function computeWeightedCount() {
  const kids = participants.filter(p=>p.type==='Kind').length;
  const adults = participants.filter(p=>p.type==='Volwassene').length;
  return kids + adultFactor * adults;
}
function currency(n){ return 'â‚¬ ' + Number(n||0).toFixed(2); }

/* ------------- Participants UI ------------- */
function refreshParticipantsUI(){
  // dropdown
  el.participantsDropdown.innerHTML = '';
  participants.forEach((p,i)=>{
    const opt = document.createElement('option');
    opt.value = i;
    opt.textContent = `${p.name} (${p.type})`;
    el.participantsDropdown.appendChild(opt);
  });
  // weighted
  el.weightedCount.textContent = computeWeightedCount().toFixed(2);
}
function addParticipant(e){
  e.preventDefault();
  const name = el.participantName.value.trim();
  const type = el.participantType.value;
  if(!name) return;
  participants.push({name,type});
  el.participantForm.reset();
  saveAll();
  refreshParticipantsUI();
  generateTable();
}
function removeSelectedParticipant(){
  const idx = parseInt(el.participantsDropdown.value);
  if(isNaN(idx)) { alert('Selecteer eerst een deelnemer.'); return; }
  if(!confirm('Deelnemer verwijderen?')) return;
  participants.splice(idx,1);
  saveAll();
  refreshParticipantsUI();
  generateTable();
}
function clearAllParticipants(){
  if(!confirm('Verwijder alle deelnemers en zet defaults terug?')) return;
  participants = [];
  for (let i=1;i<=15;i++) participants.push({name:`Kind ${i}`, type:'Kind'});
  for (let i=1;i<=4;i++) participants.push({name:`Volwassene ${i}`, type:'Volwassene'});
  saveAll();
  refreshParticipantsUI();
  generateTable();
}

/* ------------- Products UI & calculations ------------- */
function generateTable(){
  el.tableBody.innerHTML = '';
  const weight = computeWeightedCount();
  products.forEach((item,i)=>{
    const base = item.consumption * weight;
    const toOrder = Math.max(Math.ceil(base) - (item.inventory||0), 0);
    const d2 = Math.max(Math.ceil(item.consumption * weight * 2) - (item.inventory||0), 0);
    const d3 = Math.max(Math.ceil(item.consumption * weight * 3) - (item.inventory||0), 0);
    const d5 = Math.max(Math.ceil(item.consumption * weight * 5) - (item.inventory||0), 0);
    const d6 = Math.max(Math.ceil(item.consumption * weight * 6) - (item.inventory||0), 0);
    const d7 = Math.max(Math.ceil(item.consumption * weight * 7) - (item.inventory||0), 0);

    const tr = document.createElement('tr');
    tr.innerHTML = `
      <td class="product-name">${escapeHtml(item.product)}</td>
      <td>${escapeHtml(item.unit)}</td>
      <td id="price-${i}" ondblclick="editPrice(${i})">${item.price!=null?currency(item.price):''}</td>
      <td><input type="number" min="0" value="${item.inventory||0}" onchange="setInventory(${i},this.value)" style="width:80px"></td>
      <td id="order-${i}">${toOrder}</td>
      <td id="d2-${i}">${d2}</td>
      <td id="d3-${i}">${d3}</td>
      <td id="d5-${i}">${d5}</td>
      <td id="d6-${i}">${d6}</td>
      <td id="d7-${i}">${d7}</td>
      <td><input type="number" min="0" value="${item.actual||0}" onchange="setActual(${i},this.value)" style="width:80px"></td>
      <td><button class="secondary" onclick="removeProduct(${i})">âœ–</button></td>
    `;
    el.tableBody.appendChild(tr);
  });

  calculateTotalsAndUpdateFooter();
  saveAll();
}

function setInventory(i,v){
  products[i].inventory = parseFloat(v) || 0;
  saveAll();
  generateTable();
}
function setActual(i,v){
  products[i].actual = parseFloat(v) || 0;
  saveAll();
}

function addProduct(e){
  e.preventDefault();
  const name = el.productName.value.trim();
  const unit = el.productUnit.value.trim() || '';
  const cons = parseFloat(el.productConsumption.value);
  const price = parseFloat(el.productPrice.value) || 0;
  if(!name || isNaN(cons)){ alert('Vul productnaam en consumptie in'); return; }
  products.push({product:name, unit, consumption:cons, price, inventory:0, actual:0});
  el.productForm.reset();
  generateTable();
}
function removeProduct(i){
  if(!confirm('Product verwijderen?')) return;
  products.splice(i,1);
  saveAll();
  generateTable();
}
function editPrice(i){
  const cur = products[i].price || 0;
  const v = prompt('Prijs per eenheid (â‚¬):', cur);
  const n = parseFloat(v);
  if(!isNaN(n)){
    products[i].price = n;
    saveAll();
    generateTable();
  }
}

/* ------------- Totals / footer ------------- */
function calculateTotalsAndUpdateFooter(){
  const weight = computeWeightedCount();
  let sum2=0,sum3=0,sum5=0,sum6=0,sum7=0;
  products.forEach(item=>{
    const inv = item.inventory||0;
    const d2 = Math.max(Math.ceil(item.consumption * weight * 2) - inv, 0);
    const d3 = Math.max(Math.ceil(item.consumption * weight * 3) - inv, 0);
    const d5 = Math.max(Math.ceil(item.consumption * weight * 5) - inv, 0);
    const d6 = Math.max(Math.ceil(item.consumption * weight * 6) - inv, 0);
    const d7 = Math.max(Math.ceil(item.consumption * weight * 7) - inv, 0);
    const p = item.price || 0;
    sum2 += p * d2;
    sum3 += p * d3;
    sum5 += p * d5;
    sum6 += p * d6;
    sum7 += p * d7;
  });
  el.tot2.textContent = currency(sum2);
  el.tot3.textContent = currency(sum3);
  el.tot5.textContent = currency(sum5);
  el.tot6.textContent = currency(sum6);
  el.tot7.textContent = currency(sum7);
}

/* ------------- PDF export ------------- */
function exportPDF(){
  const { jsPDF } = window.jspdf;
  const doc = new jsPDF({unit:'pt',format:'a4'});
  doc.setFontSize(18);
  doc.text('ðŸ›’ Boodschappenlijst Dione', 40, 50);
  doc.setFontSize(11);
  const weight = computeWeightedCount();
  doc.text(`Gewogen deelnemers: ${weight.toFixed(2)}`, 40, 70);
  doc.text(`Event (dagen): ${el.eventType.value}`, 250, 70);

  let y = 95;
  const lineH = 16;
  // header row for PDF (checkbox + product + counts)
  doc.setFontSize(12);
  doc.text(' ', 40, y); // left padding
  doc.text('Product', 60, y);
  doc.text('2d', 320, y);
  doc.text('3d', 360, y);
  doc.text('5d', 400, y);
  doc.text('6d', 440, y);
  doc.text('7d', 480, y);
  y += lineH;

  products.forEach((item,i)=>{
    const inv = item.inventory||0;
    const d2 = Math.max(Math.ceil(item.consumption * weight * 2) - inv, 0);
    const d3 = Math.max(Math.ceil(item.consumption * weight * 3) - inv, 0);
    const d5 = Math.max(Math.ceil(item.consumption * weight * 5) - inv, 0);
    const d6 = Math.max(Math.ceil(item.consumption * weight * 6) - inv, 0);
    const d7 = Math.max(Math.ceil(item.consumption * weight * 7) - inv, 0);
    const any = (d2||d3||d5||d6||d7) > 0;
    if(!any) return;
    // new page check
    if(y > 750){ doc.addPage(); y = 60; }
    // checkbox
    doc.rect(40, y-10, 10, 10); // checkbox
    // product name
    doc.text(truncateString(item.product, 36), 60, y);
    doc.text(String(d2), 320, y);
    doc.text(String(d3), 360, y);
    doc.text(String(d5), 400, y);
    doc.text(String(d6), 440, y);
    doc.text(String(d7), 480, y);
    y += lineH;
  });

  // add totals summary page
  doc.addPage();
  doc.setFontSize(14);
  doc.text('Samenvatting kosten (per scenario)', 40, 60);
  doc.setFontSize(12);
  doc.text(`2 dagen: ${el.tot2.textContent}`, 40, 90);
  doc.text(`3 dagen: ${el.tot3.textContent}`, 40, 110);
  doc.text(`5 dagen: ${el.tot5.textContent}`, 40, 130);
  doc.text(`6 dagen: ${el.tot6.textContent}`, 40, 150);
  doc.text(`7 dagen: ${el.tot7.textContent}`, 40, 170);

  doc.save('boodschappenlijst.pdf');
}

/* ------------- Helpers & safety ------------- */
function escapeHtml(s){ return String(s||'').replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;'); }
function truncateString(s, len){ if(!s) return ''; return s.length>len? s.slice(0,len-1)+'â€¦': s; }

/* ------------- Events binding ------------- */
el.participantForm.addEventListener('submit', addParticipant);
el.removeParticipantBtn.addEventListener('click', removeSelectedParticipant);
el.clearParticipantsBtn.addEventListener('click', clearAllParticipants);
el.productForm.addEventListener('submit', addProduct);
el.exportPdfBtn.addEventListener('click', exportPDF);
el.eventType.addEventListener('change', ()=>{ generateTable(); });

/* ------------- Init UI ------------- */
refreshParticipantsUI();
generateTable();
saveAll();

/* expose some functions for inline handlers (set from generated HTML) */
window.setInventory = setInventory;
window.setActual = setActual;
window.removeProduct = removeProduct;
window.editPrice = editPrice;
window.removeParticipant = (i)=>{ participants.splice(i,1); saveAll(); refreshParticipantsUI(); generateTable(); };

</script>
</body>
</html>
